# Code generated by sqlc. DO NOT EDIT.
# versions:
#   sqlc v1.30.0
# source: query.sql
from typing import AsyncIterator, Optional

import sqlalchemy
import sqlalchemy.ext.asyncio

from ninjamagic.gen import models


COUNT_CHARACTERS_FOR_ACCOUNT = """-- name: count_characters_for_account \\:one
SELECT COUNT(*)\\:\\:bigint AS count
FROM characters
WHERE account_id = :p1
"""


CREATE_CHARACTER = """-- name: create_character \\:one

INSERT INTO characters (account_id, slot, name)
VALUES (:p1, :p2, :p3)
RETURNING id, account_id, slot, name, created_at
"""


DELETE_CHARACTER_BY_ACCOUNT_SLOT = """-- name: delete_character_by_account_slot \\:exec
DELETE FROM characters
WHERE account_id = :p1 AND slot = :p2
"""


GET_ACCOUNT_BY_ID = """-- name: get_account_by_id \\:one
SELECT id, provider, subject, email, created_at
FROM accounts
WHERE id = :p1
LIMIT 1
"""


GET_ACCOUNT_BY_PROVIDER_SUBJECT = """-- name: get_account_by_provider_subject \\:one
SELECT id, provider, subject, email, created_at
FROM accounts
WHERE provider = :p1 AND subject = :p2
LIMIT 1
"""


GET_CHARACTERS_BY_ACCOUNT = """-- name: get_characters_by_account \\:many
SELECT id, account_id, slot, name, created_at
FROM characters
WHERE account_id = :p1
ORDER BY slot
"""


GET_OPEN_SLOTS_FOR_ACCOUNT = """-- name: get_open_slots_for_account \\:many
SELECT s.slot
FROM slots AS s
LEFT JOIN characters AS c
  ON c.account_id = :p1 AND c.slot = s.slot
WHERE c.id IS NULL
ORDER BY 1
"""


UPSERT_ACCOUNT = """-- name: upsert_account \\:one

INSERT INTO accounts (provider, subject, email)
VALUES (:p1, :p2, :p3)
ON CONFLICT (provider, subject) DO UPDATE
  SET email = EXCLUDED.email
RETURNING id, provider, subject, email, created_at
"""


class AsyncQuerier:
    def __init__(self, conn: sqlalchemy.ext.asyncio.AsyncConnection):
        self._conn = conn

    async def count_characters_for_account(self, *, account_id: int) -> Optional[int]:
        row = (await self._conn.execute(sqlalchemy.text(COUNT_CHARACTERS_FOR_ACCOUNT), {"p1": account_id})).first()
        if row is None:
            return None
        return row[0]

    async def create_character(self, *, account_id: int, slot: int, name: str) -> Optional[models.Character]:
        row = (await self._conn.execute(sqlalchemy.text(CREATE_CHARACTER), {"p1": account_id, "p2": slot, "p3": name})).first()
        if row is None:
            return None
        return models.Character(
            id=row[0],
            account_id=row[1],
            slot=row[2],
            name=row[3],
            created_at=row[4],
        )

    async def delete_character_by_account_slot(self, *, account_id: int, slot: int) -> None:
        await self._conn.execute(sqlalchemy.text(DELETE_CHARACTER_BY_ACCOUNT_SLOT), {"p1": account_id, "p2": slot})

    async def get_account_by_id(self, *, id: int) -> Optional[models.Account]:
        row = (await self._conn.execute(sqlalchemy.text(GET_ACCOUNT_BY_ID), {"p1": id})).first()
        if row is None:
            return None
        return models.Account(
            id=row[0],
            provider=row[1],
            subject=row[2],
            email=row[3],
            created_at=row[4],
        )

    async def get_account_by_provider_subject(self, *, provider: str, subject: str) -> Optional[models.Account]:
        row = (await self._conn.execute(sqlalchemy.text(GET_ACCOUNT_BY_PROVIDER_SUBJECT), {"p1": provider, "p2": subject})).first()
        if row is None:
            return None
        return models.Account(
            id=row[0],
            provider=row[1],
            subject=row[2],
            email=row[3],
            created_at=row[4],
        )

    async def get_characters_by_account(self, *, account_id: int) -> AsyncIterator[models.Character]:
        result = await self._conn.stream(sqlalchemy.text(GET_CHARACTERS_BY_ACCOUNT), {"p1": account_id})
        async for row in result:
            yield models.Character(
                id=row[0],
                account_id=row[1],
                slot=row[2],
                name=row[3],
                created_at=row[4],
            )

    async def get_open_slots_for_account(self, *, account_id: int) -> AsyncIterator[int]:
        result = await self._conn.stream(sqlalchemy.text(GET_OPEN_SLOTS_FOR_ACCOUNT), {"p1": account_id})
        async for row in result:
            yield row[0]

    async def upsert_account(self, *, provider: str, subject: str, email: str) -> Optional[models.Account]:
        row = (await self._conn.execute(sqlalchemy.text(UPSERT_ACCOUNT), {"p1": provider, "p2": subject, "p3": email})).first()
        if row is None:
            return None
        return models.Account(
            id=row[0],
            provider=row[1],
            subject=row[2],
            email=row[3],
            created_at=row[4],
        )
